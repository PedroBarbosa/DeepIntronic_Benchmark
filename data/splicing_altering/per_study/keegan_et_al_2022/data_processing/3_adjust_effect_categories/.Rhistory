prob <- c()
seq  <- seq(-1, 1, length.out = 1001)
artifA <- sample(x = artif_brain, size = length(artif_brain))
artifB <- sample(x = artif_muscle, size = length(artif_muscle))
p_zero_Fast <- abs(length(which(artifA - artifB > 0))/length(artifA)-0.5)+0.5
nrepBetas[[1]] <- median(artif_brain)
nrepBetas[[2]] <- median(artif_muscle)
nrepBetas[[3]] <- p_zero_Fast
nrepBetas[[4]] <- artif_brain
nrepBetas[[5]] <- artif_muscle
names(nrepBetas) <- c("BrainMedianPsi", "MuscleMedianPsi", "Pdiff", "BrainPoints", "MusclePoints")
return(nrepBetas)
}
gtexBetas <- lapply(1:nrow(filteredPsis), function(x) gtexNrepsBetas(row = x))
names(gtexBetas) <- rownames(filteredPsis)
diffTable <- AllSE_BrainMuscle_Filtered
diffTable$BrainMedianPsi      <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[1]])))
diffTable$MuscleMedianPsi     <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[2]])))
diffTable$deltaBrainToMuscle  <- diffTable$BrainMedianPsi - diffTable$MuscleMedianPsi
diffTable$Pdiff               <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[3]])))
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[eventsOI,],
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events")) +
theme(text = element_text(size = 20))
# Select fixed N replicates
nreps <- 5
brain_nrep_cols <- sample(x = which(tissues == "Brain"), size = nreps)
brain_samples   <- colnames(filteredPsis)[brain_nrep_cols]
muscle_nrep_cols  <- sample(x = which(tissues == "Muscle"), size = nreps)
muscle_samples    <- colnames(filteredPsis)[muscle_nrep_cols]
# ::::::::::::::::
gtexNrepsBetas <- function(row){
nrepBetas <- list()
brain_covs  <- as.numeric(as.vector(cov[row, brain_samples]))
brain_inc   <- as.numeric(as.vector(inc[row, brain_samples]))
brain_exc   <- as.numeric(as.vector(exc[row, brain_samples]))
muscle_covs <- as.numeric(as.vector(cov[row, muscle_samples]))
muscle_inc  <- as.numeric(as.vector(inc[row, muscle_samples]))
muscle_exc  <- as.numeric(as.vector(exc[row, muscle_samples]))
artif_brain <- c()
artif_muscle <- c()
artif_sample_brain  <- c()
artif_sample_muscle <- c()
for(j in 1:nreps){
artif_sample_brain  <- c(artif_sample_brain, rep(brain_samples[j], times = 500))
artif_sample_muscle <- c(artif_sample_muscle, rep(muscle_samples[j], times = 500))
artif_brain         <- c(artif_brain,
rbeta(500, shape1 = brain_inc[j], shape2 = brain_exc[j]))
artif_muscle        <- c(artif_muscle,
rbeta(500, shape1 = muscle_inc[j], shape2 = muscle_exc[j]))
}
median1 <- median(artif_brain)
median2 <- median(artif_muscle)
names(artif_brain)  <- artif_sample_brain
names(artif_muscle) <- artif_sample_muscle
prob <- c()
seq  <- seq(-1, 1, length.out = 1001)
artifA <- sample(x = artif_brain, size = length(artif_brain))
artifB <- sample(x = artif_muscle, size = length(artif_muscle))
p_zero_Fast <- abs(length(which(artifA - artifB > 0))/length(artifA)-0.5)+0.5
nrepBetas[[1]] <- median(artif_brain)
nrepBetas[[2]] <- median(artif_muscle)
nrepBetas[[3]] <- p_zero_Fast
nrepBetas[[4]] <- artif_brain
nrepBetas[[5]] <- artif_muscle
names(nrepBetas) <- c("BrainMedianPsi", "MuscleMedianPsi", "Pdiff", "BrainPoints", "MusclePoints")
return(nrepBetas)
}
gtexBetas <- lapply(1:nrow(filteredPsis), function(x) gtexNrepsBetas(row = x))
names(gtexBetas) <- rownames(filteredPsis)
diffTable <- AllSE_BrainMuscle_Filtered
diffTable$BrainMedianPsi      <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[1]])))
diffTable$MuscleMedianPsi     <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[2]])))
diffTable$deltaBrainToMuscle  <- diffTable$BrainMedianPsi - diffTable$MuscleMedianPsi
diffTable$Pdiff               <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[3]])))
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[eventsOI,],
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events")) +
theme(text = element_text(size = 20))
# Study the "outliers" of the volcano
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
geom_abline(intercept = c(0.5, 0.5),
slope = c(-1, 1)) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = examples,
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events"))
examples <- rownames(diffTable[which((diffTable$Pdiff<diffTable$deltaBrainToMuscle+0.5 | diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 1),])
extreme_examples <- rownames(diffTable[which((diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 0.9),])
# Study the "outliers" of the volcano
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
geom_abline(intercept = c(0.5, 0.5),
slope = c(-1, 1)) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = examples,
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events"))
examples <- rownames(diffTable[which((diffTable$Pdiff<diffTable$deltaBrainToMuscle+0.5 | diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 1),])
extreme_examples <- rownames(diffTable[which((diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 0.9),])
# Select a random event to plot from the subset of "events of interest" and "examples"
i <- sample(which(rownames(filteredPsis) %in% c(eventsOI, extreme_examples)), size = 1)
# ::::::::::::::::::::::::::
volcanoInd <- ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point(show.legend = FALSE,
alpha = 0.5) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[i,],
color = "black") +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(title = rownames(diffTable)[i])
psistoPlot <- melt(filteredPsis[i,])
psistoPlot$tissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (area of retrieval)`[match(psistoPlot$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
psistoPlot$subtissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (detail)`[match(psistoPlot$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
usedSamples <- c(unique(names(gtexBetas[[i]][[4]])), unique(names(gtexBetas[[i]][[5]])))
sample      <- psistoPlot[match(usedSamples, psistoPlot$variable),]
plotPsis <- ggplot(data = psistoPlot,
aes(x = tissue,
y = value,
group = tissue,
color = tissue,
fill = tissue)) +
geom_violin(show.legend = FALSE,
alpha = 0.5) +
geom_jitter(alpha = 0.2,
show.legend = FALSE) +
geom_jitter(data = sample,
color = "black",
fill = "black",
show.legend = FALSE) +
scale_fill_manual(values = c(brain_color, muscle_color)) +
scale_color_manual(values = c(brain_color, muscle_color)) +
xlab("tissue") +
ylab("PSI") +
theme(plot.title = element_text(size = 8),
axis.title.x = element_blank()) +
stat_compare_means(data = sample,
method = "kruskal.test",
label.y = 1,
show.legend = FALSE)
artif1 <- gtexBetas[[i]][[4]]
artif2 <- gtexBetas[[i]][[5]]
median1 <- gtexBetas[[i]][[1]]
median2 <- gtexBetas[[i]][[2]]
pbrain <- ggplot() +
geom_jitter(aes(x = factor(names(artif1)),
y = as.numeric(as.vector(artif1))),
alpha = 0.2,
color = brain_color,
fill = brain_color) +
geom_hline(yintercept = median1,
color = brain_color) +
xlab("") +
scale_y_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
theme(axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.title.y = element_blank())
pmuscle <- ggplot() +
geom_jitter(aes(x = factor(names(artif2)),
y = as.numeric(as.vector(artif2))),
alpha = 0.2,
color = muscle_color,
fill = muscle_color) +
geom_hline(yintercept = median2,
color = muscle_color) +
xlab("") +
scale_y_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
theme(axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.title.y = element_blank())
multiplotRow  <- plot_grid(plotPsis, pbrain, pmuscle, ncol = 3, align = "h")
multiplot     <- plot_grid(volcanoInd, multiplotRow, nrow = 2)
multiplot
rownames(diffTable)[i]
rownames(diffTable)[i] %in% eventsOI
library(readr)
library(dplyr)
setwd("~/git_repos/paper_intronic_benchmark/data/keegan_et_al_2022/data_processing/3_compare_keegan_with_our_flag/")
latest_processed_data <- read_tsv('1_processed_data.tsv') %>% select(hgvs,mutation_flag)
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/3_compare_keegan_with_our_flag/")
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/3_adjust_effect_categories/compare_keegan_with_our_flag/")
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/3_adjust_effect_categories/")
latest_processed_data <- read_tsv('1_processed_data.tsv') %>% select(hgvs,mutation_flag)
################
#### keegan  ###
################
keeganTab <- read_tsv('keegan_2022_tabular_original.tsv')
################
### vazDrago ###
################
vazDragoTab <- read_tsv('vazDrago_tabular_original.tsv')
keegan_in_vazDrago <- read_tsv('keegan_in_vazDrago.tsv')
joined <- left_join(vazDragoTab, keegan_in_vazDrago, by="HGVSc")
joined2 <- left_join(joined, latest_processed_data, by =c("ID" = "hgvs")) %>% distinct() %>% select(-c(ID, mutation_flag))
View(joined2)
# Dont write now because I manually curated the variants
joined2 %>% write_tsv(file='vazDrago_tabular.tsv', col_names =  T)
View(latest_processed_data)
latest_processed_data <- read_tsv('1_processed_data.tsv')# %>% select(hgvs,mutation_flag)
View(latest_processed_data)
View(keegan_in_vazDrago)
joined <- left_join(keegan_in_vazDrago, latest_processed_data, by="ID")
View(latest_processed_data)
latest_processed_data <- read_tsv('1_processed_data.tsv') %>% select(hgvs,mutation_flag)
View(keegan_in_vazDrago)
joined <- left_join(keegan_in_vazDrago, latest_processed_data, by=c("ID" = "hgvs"))
View(joined)
joined2 <- left_join(vazDragoTab, joined, by = "HGVSc") %>% distinct() %>% select(-c(ID, mutation_flag))
View(joined2)
joined2 <- left_join(vazDragoTab, joined, by = "HGVSc") %>% distinct() #%>% select(-c(ID, mutation_flag))
View(joined2)
joined2 <- left_join(vazDragoTab, joined, by = "HGVSc") %>% distinct() %>% select(-ID)
# Dont write now because I manually curated the variants
joined2 %>% write_tsv(file='vazDrago_tabular.tsv', col_names =  T)
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
setwd("~/git_repos/paper_intronic_benchmark/data/keegan_et_al_2022/data_processing/")
data <- read_xlsx('0_supp_tables.xlsx', sheet = 1, skip= 1) %>% select(c(ID,
Gene,
Intron,
Size,
`Transcript ID`,
`Instigating mutation(s)`,
`Mutation type`,
`Mutation type updated`,
`RNA source`))
names(data) <- tolower(names(data))
data <- data %>% rename(tx_id = `transcript id`,
mutation = `instigating mutation(s)`,
mutation_type = `mutation type`,
mutation_type_updated = `mutation type updated`,
rna_source = `rna source`)
# Melt variants triggering the same pseudoexons
data <- data %>% mutate(mutation = strsplit(mutation, "; ")) %>% unnest(mutation)
# Remove variants with rsIDs with low condifence
rsIDs_to_remove <- c("rs2014886", "rs2545162", "rs2075356")
data <- filter(data, !grepl(paste(rsIDs_to_remove, collapse="|"), mutation))
# Remove spaces from mutation column
data$mutation <- sapply(strsplit(data$mutation, "\\s+"), "[", 1)
# Select rows where mutation starts with c.*
data <- data %>% filter(str_detect(mutation, "^c."))
# Generate HGVSc
data$hgvs <- paste0(data$tx_id, ":", data$mutation)
# Remove ENCO and DIST3/5 and tricky mutations
data <- data %>% filter(mutation_type != "ENCO" & mutation_type != "DIST3/5")
data <- data %>% filter(id != "PMS2-7-1")
data <- data %>% filter(mutation != "c.1390-12_1390-13insL1(6044)")
# Change type of composite mutation cases
# (HADH-5-1) A-SNP + D-SNV
data[data$mutation == "c.636+385A>G",]$mutation_type <- 'A-SNP'
data[data$mutation == "c.636+385A>G",]$mutation_type_updated <- 'A-SNP'
data[data$mutation == "c.636+471G>T",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.636+471G>T",]$mutation_type_updated <- 'D-SNV'
# (NTRK1-8-1a) D-SNV + M-SNV
data[data$mutation == "c.851-794C>G",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.851-794C>G",]$mutation_type_updated <- 'D-SNV'
data[data$mutation == "c.851-798C>T",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.851-798C>T",]$mutation_type_updated <- 'M-SNV'
# (DMD-2-3) M-OTH
data[data$mutation == "c.94-78858C>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.94-78858C>G",]$mutation_type_updated <- 'M-SNV'
data[data$mutation == "c.94-78836T>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.94-78836T>G",]$mutation_type_updated <- 'M-SNV'
# (COL4A3-48-1) D-SNV
data[data$mutation == "c.4463-523C>G",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.4463-523C>G",]$mutation_type_updated <- 'D-SNV'
data[data$mutation == "c.4463-537A>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.4463-537A>G",]$mutation_type_updated <- 'M-SNV'
# (COL4A5-29-1) BPD
# One of the composite mutations appear to influence more
#the polypirimide tract close to the pseudoexon cryptic acceptor
data[data$mutation == "c.2395+1292G>T",]$mutation_type_updated <- 'A-SNV_outDinuc'
# Delete one OTC-9-1: same variants originates 2 slightly different pseudoexons.
# The one that the mutation corresponds to the donor site is going to be kept
data <- data %>% filter(id != "OTC-9-1a")
# Delete MYBPC3-12-1a and MYBPC3-20-2: same variant originates two pseudoexons.
# The one that the mutation corresponds to the donor site is going to be kept
data <- data %>% filter(!id %in% c("MYBPC3-12-1a", "MYBPC3-20-2"))
# Delete DMD-32-1b same variant originates two slightly different pseudoexons
# The one that the mutation corresponds to the acceptor site is going to be kept
data <- data %>% filter(id != c("DMD-32-1b"))
# First and last pseudoexon positions that were mutated (and treated as A-SNV and D-SNV in the paper)
# were kept as they are.
map_dict <- c('A-OTH'='new_splice_acceptor',
'A-SNP'='new_splice_acceptor',
'A-SNV'='new_splice_acceptor',
'A-SNV_outDinuc' = 'strengthening_acceptor',
'A-SNP_outDinuc' = 'strengthening_acceptor',
'A-OTH_outDinuc' = 'strengthening_acceptor',
'D-OTH'='new_splice_donor',
'D-SNP'='new_splice_donor',
'D-SNV'='new_splice_donor',
'D-SNV_outDinuc' = 'strengthening_donor',
'D-SNP_outDinuc' = 'strengthening_donor',
'D-OTH_outDinuc' = 'strengthening_donor',
'DIST3'='strengthening_donor',
'DIST5'='strengthening_acceptor',
'BPD'='branchpoint_associated',
'M-OTH'='change_sre',
'M-SNV'='change_sre',
'M-SNP'='change_sre')
data <- data %>%
mutate(mutation_flag = recode(mutation_type_updated, !!!map_dict, .default = NA_character_))
data %>% count(mutation_type_updated)
data %>% count(mutation_flag)
# Write output
data %>% write_tsv(file='1_processed_data.tsv')
write.csv(unique(data$hgvs), file="1_hgvs.txt", row.names=F, quote = F)
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
setwd("~/git_repos/paper_intronic_benchmark/data/keegan_et_al_2022/data_processing/")
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/")
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/")
data <- read_xlsx('0_supp_tables.xlsx', sheet = 1, skip= 1) %>% select(c(ID,
Gene,
Intron,
Size,
`Transcript ID`,
`Instigating mutation(s)`,
`Mutation type`,
`Mutation type updated`,
`RNA source`))
names(data) <- tolower(names(data))
data <- data %>% rename(tx_id = `transcript id`,
mutation = `instigating mutation(s)`,
mutation_type = `mutation type`,
mutation_type_updated = `mutation type updated`,
rna_source = `rna source`)
# Melt variants triggering the same pseudoexons
data <- data %>% mutate(mutation = strsplit(mutation, "; ")) %>% unnest(mutation)
# Remove variants with rsIDs with low condifence
rsIDs_to_remove <- c("rs2014886", "rs2545162", "rs2075356")
data <- filter(data, !grepl(paste(rsIDs_to_remove, collapse="|"), mutation))
# Remove spaces from mutation column
data$mutation <- sapply(strsplit(data$mutation, "\\s+"), "[", 1)
# Select rows where mutation starts with c.*
data <- data %>% filter(str_detect(mutation, "^c."))
# Generate HGVSc
data$hgvs <- paste0(data$tx_id, ":", data$mutation)
# PROCESS MUTATION TYPES
# Mutation types:
#A-SNV/A-SNP = Acceptor motif, SNV or SNP -> new_acceptor
#A-OTH = Acceptor motif, non-substitution mutation; -> new_acceptor
#D-SNV/D-SNP = Donor motif, SNV or SNP; -> new_donor
#D-OTH = Donor motif, non-susbtitution mutation;  -> new_donor
#BPD = Mutation (any size) affecting definition of the pseudoexon BP -> branchpoint
#DIST3 = Mutation 3´ of pseudoexon donor site; -> sre_intronic -> strenghtning_donor
#DIST5 = Mutation 5´ of pseudoexon acceptor and branch point motifs; -> strenghtning_acceptor
#ENCO = Insertion or inversion mutation where the inserted/inverted sequence completely encompasses the pseudoexon and its splice motifs;
#M-SNV/M-SNP = Mid-pseudoexon, SNV or SNP;-> sre
#M-OTH = Mid-pseudoexon, non-substitution mutation; -> sre
#UNKN = Mutation not determined.
# Remove ENCO and DIST3/5 and tricky mutations
data <- data %>% filter(mutation_type != "ENCO" & mutation_type != "DIST3/5")
data <- data %>% filter(id != "PMS2-7-1")
data <- data %>% filter(mutation != "c.1390-12_1390-13insL1(6044)")
# Change type of composite mutation cases
# (HADH-5-1) A-SNP + D-SNV
data[data$mutation == "c.636+385A>G",]$mutation_type <- 'A-SNP'
data[data$mutation == "c.636+385A>G",]$mutation_type_updated <- 'A-SNP'
data[data$mutation == "c.636+471G>T",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.636+471G>T",]$mutation_type_updated <- 'D-SNV'
# (NTRK1-8-1a) D-SNV + M-SNV
data[data$mutation == "c.851-794C>G",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.851-794C>G",]$mutation_type_updated <- 'D-SNV'
data[data$mutation == "c.851-798C>T",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.851-798C>T",]$mutation_type_updated <- 'M-SNV'
# (DMD-2-3) M-OTH
data[data$mutation == "c.94-78858C>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.94-78858C>G",]$mutation_type_updated <- 'M-SNV'
data[data$mutation == "c.94-78836T>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.94-78836T>G",]$mutation_type_updated <- 'M-SNV'
# (COL4A3-48-1) D-SNV
data[data$mutation == "c.4463-523C>G",]$mutation_type <- 'D-SNV'
data[data$mutation == "c.4463-523C>G",]$mutation_type_updated <- 'D-SNV'
data[data$mutation == "c.4463-537A>G",]$mutation_type <- 'M-SNV'
data[data$mutation == "c.4463-537A>G",]$mutation_type_updated <- 'M-SNV'
# (COL4A5-29-1) BPD
# One of the composite mutations appear to influence more
#the polypirimide tract close to the pseudoexon cryptic acceptor
data[data$mutation == "c.2395+1292G>T",]$mutation_type_updated <- 'A-SNV_outDinuc'
# Delete one OTC-9-1: same variants originates 2 slightly different pseudoexons.
# The one that the mutation corresponds to the donor site is going to be kept
data <- data %>% filter(id != "OTC-9-1a")
# Delete MYBPC3-12-1a and MYBPC3-20-2: same variant originates two pseudoexons.
# The one that the mutation corresponds to the donor site is going to be kept
data <- data %>% filter(!id %in% c("MYBPC3-12-1a", "MYBPC3-20-2"))
# Delete DMD-32-1b same variant originates two slightly different pseudoexons
# The one that the mutation corresponds to the acceptor site is going to be kept
data <- data %>% filter(id != c("DMD-32-1b"))
#############################
## Simplify mutation types ##
#############################
# Intronic mutations outside the dinucleotide sequences that compose the pseudoexon
#were treated as strenghtening variants
# First and last pseudoexon positions that were mutated (and treated as A-SNV and D-SNV in the paper)
# were kept as they are.
map_dict <- c('A-OTH'='new_splice_acceptor',
'A-SNP'='new_splice_acceptor',
'A-SNV'='new_splice_acceptor',
'A-SNV_outDinuc' = 'strengthening_acceptor',
'A-SNP_outDinuc' = 'strengthening_acceptor',
'A-OTH_outDinuc' = 'strengthening_acceptor',
'D-OTH'='new_splice_donor',
'D-SNP'='new_splice_donor',
'D-SNV'='new_splice_donor',
'D-SNV_outDinuc' = 'strengthening_donor',
'D-SNP_outDinuc' = 'strengthening_donor',
'D-OTH_outDinuc' = 'strengthening_donor',
'DIST3'='strengthening_donor',
'DIST5'='strengthening_acceptor',
'BPD'='branchpoint_associated',
'M-OTH'='change_sre',
'M-SNV'='change_sre',
'M-SNP'='change_sre')
data <- data %>%
mutate(mutation_flag = recode(mutation_type_updated, !!!map_dict, .default = NA_character_))
data %>% count(mutation_type_updated)
data %>% count(mutation_flag)
# Write output
data %>% write_tsv(file='1_processed_data.tsv')
write.csv(unique(data$hgvs), file="1_hgvs.txt", row.names=F, quote = F)
library(readr)
library(dplyr)
setwd("~/git_repos/paper_intronic_benchmark/data/deep_intronic/keegan_et_al_2022/data_processing/3_adjust_effect_categories/")
latest_processed_data <- read_tsv('1_processed_data.tsv') %>% select(hgvs,mutation_flag)
################
### vazDrago ###
################
vazDragoTab <- read_tsv('vazDrago_tabular_original.tsv')
keegan_in_vazDrago <- read_tsv('keegan_in_vazDrago.tsv')
joined <- left_join(keegan_in_vazDrago, latest_processed_data, by=c("ID" = "hgvs"))
joined2 <- left_join(vazDragoTab, joined, by = "HGVSc") %>% distinct() %>% select(-ID)
# Dont write now because I manually curated the variants
joined2 %>% write_tsv(file='vazDrago_tabular.tsv', col_names =  T)
