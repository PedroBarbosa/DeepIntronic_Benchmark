color = brain_color,
size = 1) +
geom_density(aes(x = psisMuscle),
color = NA,
alpha = 0.5,
fill = muscle_color) +
geom_rug(aes(x = psisMuscle),
alpha = 0.5,
color = muscle_color) +
geom_vline(xintercept = psiRefMuscle,
color = muscle_color,
size = 1) +
xlab("PSI") +
scale_x_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
theme(axis.title = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 12)) +
labs(title = "Original PSIs")
# :::::::::::
# Get original coverage and mean overall coverage
# :::::::::::
covsBrain  <- as.numeric(as.vector(cov[i,brain_cols]))
covsMuscle <- as.numeric(as.vector(cov[i,muscle_cols]))
covRefBrain <- GTEx_FilteredSE_BrainMuscle$medianCoverageBrain[i]
covRefMuscle <- GTEx_FilteredSE_BrainMuscle$medianCoverageMuscle[i]
originalcov <- ggplot() +
geom_histogram(aes(x = covsBrain),
alpha = 0.5,
fill = brain_color,
color = NA,
bins = 100) +
geom_rug(aes(x = covsBrain),
alpha = 0.5,
color = brain_color) +
geom_vline(xintercept = covRefBrain,
color = brain_color,
size = 1) +
geom_histogram(aes(x = covsMuscle),
alpha = 0.5,
fill = muscle_color,
color = NA,
bins = 100) +
geom_rug(aes(x = covsMuscle),
alpha = 0.5,
color = muscle_color) +
geom_vline(xintercept = covRefMuscle,
color = muscle_color,
size = 1) +
scale_x_log10(limits = c(1,10000),
breaks = c(1,10,100,1000)) +
xlab("inc+exc") +
theme(axis.title = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 12)) +
labs(title = "Original coverage")
# Sample N samples (use for both PSI and coverage)
allPsis <- filteredPsis[i,]
allCovs <- cov[i,]
psisToSampleFrom <- melt(allPsis)
psisToSampleFrom$tissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (area of retrieval)`[match(psisToSampleFrom$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
psisToSampleFrom$subtissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (detail)`[match(psisToSampleFrom$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
brain_samples <- psisToSampleFrom$variable[sample(x = which(psisToSampleFrom$tissue == "Brain"), size = N)]
muscle_samples <- psisToSampleFrom$variable[sample(x = which(psisToSampleFrom$tissue == "Muscle"), size = N)]
brain_covs <- as.numeric(as.vector(cov[i,which(colnames(cov) %in% brain_samples)]))
brain_inc <- as.numeric(as.vector(inc[i,which(colnames(inc) %in% brain_samples)]))
brain_exc <- as.numeric(as.vector(exc[i,which(colnames(exc) %in% brain_samples)]))
muscle_covs <- as.numeric(as.vector(cov[i,which(colnames(cov) %in% muscle_samples)]))
muscle_inc <- as.numeric(as.vector(inc[i,which(colnames(inc) %in% muscle_samples)]))
muscle_exc <- as.numeric(as.vector(exc[i,which(colnames(exc) %in% muscle_samples)]))
artif1 <- c()
artif2 <- c()
artif_sample1 <- c()
artif_sample2 <- c()
for(j in 1:N){
artif_sample1   <- c(artif_sample1, rep(names1[j], times = 500))
artif_sample2   <- c(artif_sample2, rep(names2[j], times = 500))
artif1          <- c(artif1,
rbeta(500, shape1 = brain_inc[j], shape2 = brain_exc[j]))
artif2          <- c(artif2,
rbeta(500, shape1 = muscle_inc[j], shape2 = muscle_exc[j]))
}
median1 <- median(artif1)
median2 <- median(artif2)
names(artif1) <- artif_sample1
names(artif2) <- artif_sample2
p2 <- ggplot() +
geom_density(aes(x = as.numeric(as.vector(artif1)),
group = names(artif1)),
alpha = 0.3,
color = brain_color,
fill = brain_color) +
geom_density(aes(x = as.numeric(as.vector(artif2)),
group = names(artif2)),
alpha = 0.3,
color = muscle_color,
fill = muscle_color) +
xlab("PSI") +
scale_x_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
geom_vline(xintercept = median1,
color = brain_color,
size = 1) +
geom_vline(xintercept = median2,
color = muscle_color,
size = 1) +
theme(legend.position = c(0.8,0.8),
legend.text = element_text(size = 20),
legend.key = element_blank(),
legend.background = element_blank(),
axis.title = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 12)) +
labs(title = "Beta dist. PSI")
multiplot <- plot_grid(originalpsi, originalcov, p2, nrow = 3, align = "v", rel_heights = c(1,1,3))
multiplot
# Select fixed N replicates
nreps <- 5
brain_nrep_cols <- sample(x = which(tissues == "Brain"), size = nreps)
brain_samples   <- colnames(filteredPsis)[brain_nrep_cols]
muscle_nrep_cols  <- sample(x = which(tissues == "Muscle"), size = nreps)
muscle_samples    <- colnames(filteredPsis)[muscle_nrep_cols]
# ::::::::::::::::
gtexNrepsBetas <- function(row){
nrepBetas <- list()
brain_covs  <- as.numeric(as.vector(cov[row, brain_samples]))
brain_inc   <- as.numeric(as.vector(inc[row, brain_samples]))
brain_exc   <- as.numeric(as.vector(exc[row, brain_samples]))
muscle_covs <- as.numeric(as.vector(cov[row, muscle_samples]))
muscle_inc  <- as.numeric(as.vector(inc[row, muscle_samples]))
muscle_exc  <- as.numeric(as.vector(exc[row, muscle_samples]))
artif_brain <- c()
artif_muscle <- c()
artif_sample_brain  <- c()
artif_sample_muscle <- c()
for(j in 1:nreps){
artif_sample_brain  <- c(artif_sample_brain, rep(brain_samples[j], times = 500))
artif_sample_muscle <- c(artif_sample_muscle, rep(muscle_samples[j], times = 500))
artif_brain         <- c(artif_brain,
rbeta(500, shape1 = brain_inc[j], shape2 = brain_exc[j]))
artif_muscle        <- c(artif_muscle,
rbeta(500, shape1 = muscle_inc[j], shape2 = muscle_exc[j]))
}
median1 <- median(artif_brain)
median2 <- median(artif_muscle)
names(artif_brain)  <- artif_sample_brain
names(artif_muscle) <- artif_sample_muscle
prob <- c()
seq  <- seq(-1, 1, length.out = 1001)
artifA <- sample(x = artif_brain, size = length(artif_brain))
artifB <- sample(x = artif_muscle, size = length(artif_muscle))
p_zero_Fast <- abs(length(which(artifA - artifB > 0))/length(artifA)-0.5)+0.5
nrepBetas[[1]] <- median(artif_brain)
nrepBetas[[2]] <- median(artif_muscle)
nrepBetas[[3]] <- p_zero_Fast
nrepBetas[[4]] <- artif_brain
nrepBetas[[5]] <- artif_muscle
names(nrepBetas) <- c("BrainMedianPsi", "MuscleMedianPsi", "Pdiff", "BrainPoints", "MusclePoints")
return(nrepBetas)
}
gtexBetas <- lapply(1:nrow(filteredPsis), function(x) gtexNrepsBetas(row = x))
names(gtexBetas) <- rownames(filteredPsis)
diffTable <- AllSE_BrainMuscle_Filtered
diffTable$BrainMedianPsi      <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[1]])))
diffTable$MuscleMedianPsi     <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[2]])))
diffTable$deltaBrainToMuscle  <- diffTable$BrainMedianPsi - diffTable$MuscleMedianPsi
diffTable$Pdiff               <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[3]])))
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[eventsOI,],
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events")) +
theme(text = element_text(size = 20))
# Select fixed N replicates
nreps <- 5
brain_nrep_cols <- sample(x = which(tissues == "Brain"), size = nreps)
brain_samples   <- colnames(filteredPsis)[brain_nrep_cols]
muscle_nrep_cols  <- sample(x = which(tissues == "Muscle"), size = nreps)
muscle_samples    <- colnames(filteredPsis)[muscle_nrep_cols]
# ::::::::::::::::
gtexNrepsBetas <- function(row){
nrepBetas <- list()
brain_covs  <- as.numeric(as.vector(cov[row, brain_samples]))
brain_inc   <- as.numeric(as.vector(inc[row, brain_samples]))
brain_exc   <- as.numeric(as.vector(exc[row, brain_samples]))
muscle_covs <- as.numeric(as.vector(cov[row, muscle_samples]))
muscle_inc  <- as.numeric(as.vector(inc[row, muscle_samples]))
muscle_exc  <- as.numeric(as.vector(exc[row, muscle_samples]))
artif_brain <- c()
artif_muscle <- c()
artif_sample_brain  <- c()
artif_sample_muscle <- c()
for(j in 1:nreps){
artif_sample_brain  <- c(artif_sample_brain, rep(brain_samples[j], times = 500))
artif_sample_muscle <- c(artif_sample_muscle, rep(muscle_samples[j], times = 500))
artif_brain         <- c(artif_brain,
rbeta(500, shape1 = brain_inc[j], shape2 = brain_exc[j]))
artif_muscle        <- c(artif_muscle,
rbeta(500, shape1 = muscle_inc[j], shape2 = muscle_exc[j]))
}
median1 <- median(artif_brain)
median2 <- median(artif_muscle)
names(artif_brain)  <- artif_sample_brain
names(artif_muscle) <- artif_sample_muscle
prob <- c()
seq  <- seq(-1, 1, length.out = 1001)
artifA <- sample(x = artif_brain, size = length(artif_brain))
artifB <- sample(x = artif_muscle, size = length(artif_muscle))
p_zero_Fast <- abs(length(which(artifA - artifB > 0))/length(artifA)-0.5)+0.5
nrepBetas[[1]] <- median(artif_brain)
nrepBetas[[2]] <- median(artif_muscle)
nrepBetas[[3]] <- p_zero_Fast
nrepBetas[[4]] <- artif_brain
nrepBetas[[5]] <- artif_muscle
names(nrepBetas) <- c("BrainMedianPsi", "MuscleMedianPsi", "Pdiff", "BrainPoints", "MusclePoints")
return(nrepBetas)
}
gtexBetas <- lapply(1:nrow(filteredPsis), function(x) gtexNrepsBetas(row = x))
names(gtexBetas) <- rownames(filteredPsis)
diffTable <- AllSE_BrainMuscle_Filtered
diffTable$BrainMedianPsi      <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[1]])))
diffTable$MuscleMedianPsi     <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[2]])))
diffTable$deltaBrainToMuscle  <- diffTable$BrainMedianPsi - diffTable$MuscleMedianPsi
diffTable$Pdiff               <- as.numeric(as.vector(lapply(1:length(gtexBetas), function(x) gtexBetas[[x]][[3]])))
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[eventsOI,],
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events")) +
theme(text = element_text(size = 20))
# Study the "outliers" of the volcano
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
geom_abline(intercept = c(0.5, 0.5),
slope = c(-1, 1)) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = examples,
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events"))
examples <- rownames(diffTable[which((diffTable$Pdiff<diffTable$deltaBrainToMuscle+0.5 | diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 1),])
extreme_examples <- rownames(diffTable[which((diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 0.9),])
# Study the "outliers" of the volcano
ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point() +
geom_abline(intercept = c(0.5, 0.5),
slope = c(-1, 1)) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = examples,
color = "black",
fill = NA,
shape = 21) +
# xlab(expression(abs(Delta*PSI[Brain-Muscle]))) +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(caption = paste0(nrow(filteredPsis), " exon skipping (SE) events"))
examples <- rownames(diffTable[which((diffTable$Pdiff<diffTable$deltaBrainToMuscle+0.5 | diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 1),])
extreme_examples <- rownames(diffTable[which((diffTable$Pdiff < -diffTable$deltaBrainToMuscle+0.5) &
diffTable$Pdiff > 0.7 & diffTable$Pdiff < 0.9),])
# Select a random event to plot from the subset of "events of interest" and "examples"
i <- sample(which(rownames(filteredPsis) %in% c(eventsOI, extreme_examples)), size = 1)
# ::::::::::::::::::::::::::
volcanoInd <- ggplot(data = diffTable,
aes(x = deltaBrainToMuscle,
y = Pdiff,
color = deltaPSI)) +
geom_point(show.legend = FALSE,
alpha = 0.5) +
scale_color_gradient2(name = expression(Delta*PSI),
low = muscle_color,
mid = "gray",
high = brain_color) +
geom_point(data = diffTable[i,],
color = "black") +
xlab(expression(PSI[Brain]-PSI[Muscle])) +
ylab("Probability of differential splicing") +
labs(title = rownames(diffTable)[i])
psistoPlot <- melt(filteredPsis[i,])
psistoPlot$tissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (area of retrieval)`[match(psistoPlot$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
psistoPlot$subtissue <- GTEx_BrainMuscle$GTEx$`Sample metadata`$`Tissue Type (detail)`[match(psistoPlot$variable,
rownames(GTEx_BrainMuscle$GTEx$`Sample metadata`))]
usedSamples <- c(unique(names(gtexBetas[[i]][[4]])), unique(names(gtexBetas[[i]][[5]])))
sample      <- psistoPlot[match(usedSamples, psistoPlot$variable),]
plotPsis <- ggplot(data = psistoPlot,
aes(x = tissue,
y = value,
group = tissue,
color = tissue,
fill = tissue)) +
geom_violin(show.legend = FALSE,
alpha = 0.5) +
geom_jitter(alpha = 0.2,
show.legend = FALSE) +
geom_jitter(data = sample,
color = "black",
fill = "black",
show.legend = FALSE) +
scale_fill_manual(values = c(brain_color, muscle_color)) +
scale_color_manual(values = c(brain_color, muscle_color)) +
xlab("tissue") +
ylab("PSI") +
theme(plot.title = element_text(size = 8),
axis.title.x = element_blank()) +
stat_compare_means(data = sample,
method = "kruskal.test",
label.y = 1,
show.legend = FALSE)
artif1 <- gtexBetas[[i]][[4]]
artif2 <- gtexBetas[[i]][[5]]
median1 <- gtexBetas[[i]][[1]]
median2 <- gtexBetas[[i]][[2]]
pbrain <- ggplot() +
geom_jitter(aes(x = factor(names(artif1)),
y = as.numeric(as.vector(artif1))),
alpha = 0.2,
color = brain_color,
fill = brain_color) +
geom_hline(yintercept = median1,
color = brain_color) +
xlab("") +
scale_y_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
theme(axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.title.y = element_blank())
pmuscle <- ggplot() +
geom_jitter(aes(x = factor(names(artif2)),
y = as.numeric(as.vector(artif2))),
alpha = 0.2,
color = muscle_color,
fill = muscle_color) +
geom_hline(yintercept = median2,
color = muscle_color) +
xlab("") +
scale_y_continuous(limits = c(0,1),
breaks = seq(0,1,0.25)) +
theme(axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.title.y = element_blank())
multiplotRow  <- plot_grid(plotPsis, pbrain, pmuscle, ncol = 3, align = "h")
multiplot     <- plot_grid(volcanoInd, multiplotRow, nrow = 2)
multiplot
rownames(diffTable)[i]
rownames(diffTable)[i] %in% eventsOI
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
setwd("~/git_repos/paper_intronic_benchmark/scripts")
###################
##### Neutral #####
###################
list_files_neutral <- list(moles_fernandez_neutral = '../data/splicing_altering/per_study/moles_fernandez_2021/moles_fernandez_2021_no_splicing_effect_tabular.tsv',
adamson_neutral_exonic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_exonic_no_splicing_effect_tabular.tsv',
adamson_neutral_intronic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_intronic_no_splicing_effect_tabular.tsv',
cheung_neutral = '../data/splicing_altering/per_study/cheung_2019/cheung_2019_no_splicing_altering_tabular.tsv',
new_donor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_donor_neutral_tabular.tsv',
new_acceptor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_acceptor_neutral_tabular.tsv')
# Concatenate data
df_neutral <- map2_df(list_files_neutral,
names(list_files_neutral),
~read_tsv(.x) %>%
select(-any_of(c('Intron_number', 'Exon_number', 'gnomADg_AF'))) %>%
mutate(`#CHROM` = as.character(`#CHROM`),
POS = as.integer(POS)))
view(df_neutral)
view(df_neutral)
# Concatenate data
df_neutral <- map2_df(list_files_neutral,
names(list_files_neutral),
~read_tsv(.x) %>%
select(-any_of(c('Intron_number', 'Exon_number', 'gnomADg_AF'))) %>%
mutate(`#CHROM` = as.character(`#CHROM`),
POS = as.integer(POS)))
view(df_neutral)
View(df_neutral)
df_neutral
colnames(df_neutral)
###################
##### Neutral #####
###################
list_files_neutral <- list(moles_fernandez_neutral = '../data/splicing_altering/per_study/moles_fernandez_2021/moles_fernandez_2021_no_splicing_effect_tabular.tsv',
adamson_neutral_exonic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_exonic_no_splicing_effect_tabular.tsv',
adamson_neutral_intronic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_intronic_no_splicing_effect_tabular.tsv',
cheung_neutral = '../data/splicing_altering/per_study/cheung_2019/cheung_2019_no_splicing_altering_tabular.tsv',
new_donor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_donor_neutral_tabular.tsv',
new_acceptor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_acceptor_neutral_tabular.tsv')
# Concatenate data
df_neutral <- map2_df(list_files_neutral,
names(list_files_neutral),
~read_tsv(.x) %>%
select(-any_of(c('Intron_number', 'Exon_number', 'gnomADg_AF'))) %>%
mutate(`#CHROM` = as.character(`#CHROM`),
POS = as.integer(POS)))
branchpoint_neutral <- df_neutral %>% filter(Effect_category == "branchpoint_associated")
# Split neutral datasets to Pseudoexon | Exon elongation
sre_associated <- df_neutral %>% filter(Effect_category == "change_sre")
sre_associated <- sre_associated %>% dplyr::sample_frac(size=1)
other_neutral <- setdiff(df_neutral, bind_rows(branchpoint_neutral, sre_associated))
other_neutral$offset <- unlist(lapply(other_neutral$HGVSc, function(x) as.integer(str_extract(strsplit(x, split="[+-]") %>% sapply( "[", 2 ), '\\d+'))))
# Acceptor associated merged, given small datasets size
other_neutral_pseudoexon <- other_neutral %>% filter(Effect_category == "new_splice_acceptor" | (Effect_category == "closer_to_acceptor" & offset >= 150))
other_neutral_partial_IR <- other_neutral %>% filter(Effect_category == "strengthening_acceptor" | (Effect_category == "closer_to_acceptor" & offset < 150))
dim(other_neutral_pseudoexon)
view(other_neutral_pseudoexon)
view(other_neutral_pseudoexon)
View(other_neutral_pseudoexon)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
setwd("~/git_repos/paper_intronic_benchmark/scripts")
#########################
### Splicing altering ###
#########################
list_files <- list(pbarbosa = '../data/splicing_altering/per_study/pbarbosa_and_vazDrago2017/pbarbosa_tabular.tsv',
vazDrago = '../data/splicing_altering/per_study/pbarbosa_and_vazDrago2017/vazDrago_tabular.tsv',
petersen = '../data/splicing_altering/per_study/petersen_et_al_2022/petersen_2021_tabular.tsv',
keegan = '../data/splicing_altering/per_study/keegan_et_al_2022/keegan_2022_tabular.tsv',
jung  = '../data/splicing_altering/per_study/jung_et_all_2021/jung_2021_tabular.tsv',
moles_fernandez = '../data/splicing_altering/per_study/moles_fernandez_2021/moles_fernandez_2021_splicing_altering_tabular.tsv',
tubeuf = '../data/splicing_altering/per_study/tubeuf_et_al_2020/tubeuf_2020_tabular.tsv')
# Concatenate data
df <- map2_df(list_files,
names(list_files),
~read_tsv(.x) %>%
select(-any_of(c('Phenotype (OMIM)', 'Intron_number', 'gnomADg_AF'))) %>%
mutate(`#CHROM` = as.character(`#CHROM`),
POS = as.integer(POS)))
## PSEUDOEXON-INDUCING ##
pseudoexon <- df %>% filter(str_detect(Functional_consequence, 'pseudoexon'))
###################
##### Neutral #####
###################
list_files_neutral <- list(moles_fernandez_neutral = '../data/splicing_altering/per_study/moles_fernandez_2021/moles_fernandez_2021_no_splicing_effect_tabular.tsv',
adamson_neutral_exonic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_exonic_no_splicing_effect_tabular.tsv',
adamson_neutral_intronic = '../data/splicing_altering/per_study/adamson_2018/adamson_2018_intronic_no_splicing_effect_tabular.tsv',
cheung_neutral = '../data/splicing_altering/per_study/cheung_2019/cheung_2019_no_splicing_altering_tabular.tsv',
new_donor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_donor_neutral_tabular.tsv',
new_acceptor_neutral = '/Users/pbarbosa/git_repos/paper_intronic_benchmark/data/splicing_altering/per_study/neutral_gnomAD/new_acceptor_neutral_tabular.tsv')
# Concatenate data
df_neutral <- map2_df(list_files_neutral,
names(list_files_neutral),
~read_tsv(.x) %>%
select(-any_of(c('Intron_number', 'Exon_number', 'gnomADg_AF'))) %>%
mutate(`#CHROM` = as.character(`#CHROM`),
POS = as.integer(POS)))
branchpoint_neutral <- df_neutral %>% filter(Effect_category == "branchpoint_associated")
# Split neutral datasets to Pseudoexon | Exon elongation
sre_associated <- df_neutral %>% filter(Effect_category == "change_sre")
sre_associated <- sre_associated %>% dplyr::sample_frac(size=1)
other_neutral <- setdiff(df_neutral, bind_rows(branchpoint_neutral, sre_associated))
other_neutral$offset <- unlist(lapply(other_neutral$HGVSc, function(x) as.integer(str_extract(strsplit(x, split="[+-]") %>% sapply( "[", 2 ), '\\d+'))))
# Acceptor associated merged, given small datasets size
other_neutral_pseudoexon <- other_neutral %>% filter(Effect_category == "new_splice_acceptor" | (Effect_category == "closer_to_acceptor" & offset >= 150))
other_neutral_partial_IR <- other_neutral %>% filter(Effect_category == "strengthening_acceptor" | (Effect_category == "closer_to_acceptor" & offset < 150))
View(other_neutral_pseudoexon)
############
## Donors ##
############
new_donor <- other_neutral %>% filter(Effect_category == "new_splice_donor") %>% dplyr::sample_frac(size=1)
other_neutral_pseudoexon$mg <- 'Pseudoexon activation'
other_neutral_partial_IR$mg <- 'Partial intron retention'
bind_rows(other_neutral_partial_IR, other_neutral_pseudoexon) %>% write_tsv(file='~/Desktop/test.tsv')
